---
layout: page
title: IFLabel
category: documentation
description: Interfascia's IFLabel object

---

The `IFLabel` object creates a new text label.


Method Summary
--------------

<p class="method">
	<code>IFLabel(String label, int x, int y);<br />
		IFLabel(String label, int x, int y, int textSize);;
	</code>
</p>
<ul class="description">
	<li><code>label</code>, the text displayed on the label.</li>
	<li><code>x</code>, the X position of the label's upper left hand corner.</li>
	<li><code>y</code>, the Y position of the label's upper left hand corner.</li>
	<li><code>textSize</code>, the font size for the label text.</li>
</ul>

<p class="method">
	<code>setLabel(String newLabel)</code>
</p>
<ul class="description">
	<li>Sets the label text.</li>
	<li><code>newLabel</code>, the new label text.</li>
</ul>

<p class="method">
	<code>getLabel()</code>
</p>
<ul class="description">
	<li>Returns the button's name as a String.</li>
</ul>

<p class="method">
	<code>setWidth(int width)</code>
</p>
<ul class="description">
	<li>Sets the width of the button.</li>
	<li><code>width</code>, the new width for the button.</li>
</ul>

<p class="method">
	<code>getWidth()</code>
</p>
<ul class="description">
	<li>Returns the width in pixels of the button in integer form.</li>
</ul>

<p class="method">
	<code>setHeight(int height)</code>
</p>
<ul class="description">
	<li>Sets the height of the button.</li>
	<li><code>height</code>, the new height for the button.</li>
</ul>

<p class="method">
	<code>getHeight()</code>
</p>
<ul class="description">
	<li>Returns the height in pixels of the button in integer form.</li>
</ul>

<p class="method">
	<code>setSize(int width, int height)</code>
</p>
<ul class="description">
	<li>A convenience method to set both dimensions of the button.</li>
	<li><code>width</code>, the new width for the button.</li>
	<li><code>height</code>, the new height for the button.</li>
</ul>

<p class="method">
	<code>setX(int x)</code>
</p>
<ul class="description">
	<li>Sets the X position of the button relative to its GUIController.</li>
	<li><code>x</code>, the new X position for the button.</li>
</ul>

<p class="method">
	<code>getX()</code>
</p>
<ul class="description">
	<li>Returns the X position in pixels of the button relative to its GUIController.</li>
</ul>

<p class="method">
	<code>setY(int y)</code>
</p>
<ul class="description">
	<li>Sets the Y position of the button relative to its GUIController.</li>
	<li><code>y</code>, the new Y position for the button.</li>
</ul>

<p class="method">
	<code>getY()</code>
</p>
<ul class="description">
	<li>Returns the Y position in pixels of the button relative to its GUIController.</li>
</ul>

<p class="method">
	<code>setPosition(int x, int y)</code>
</p>
<ul class="description">
	<li>A convenience method to set both the X and Y position of the button.</li>
	<li><code>X</code>, the new X position for the button.</li>
	<li><code>Y</code>, the new Y position for the button.</li>
</ul>


Example
-------

	import interfascia.*;
	
	IFLabel l = new IFLabel ("Descriptive Text", 30, 30);
	
	void setup() {
	  size(150, 75);
	  GUIController c = new GUIController (this);	
	  c.add(l);
	}
	
	void draw() {
	  background(200);
	}

